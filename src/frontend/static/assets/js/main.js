// Generated by CoffeeScript 1.6.3
(function() {
  var bindFunctions, draw, onImageMouseOut, onImageMouseOver, searchDataArrived,
    _this = this;

  this.getNewTree = function() {
    var searchterm;
    searchterm = $('#input-searchterm').val();
    $('#loading-popup-searchterm').text(searchterm);
    $('#loading-popup').modal('show');
    return $.get("http://localhost:5000/search/" + searchterm, searchDataArrived);
  };

  searchDataArrived = function(data) {
    var i, node, _i, _len, _results;
    $('#loading-popup').modal('hide');
    console.log("Search data arrived:");
    console.log(data);
    _results = [];
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      node = data[i];
      _results.push(draw(node, i + 50, i * 50 + 50));
    }
    return _results;
  };

  draw = function(treeData, x, y) {
    var hyponym, hyponyms, i, key, picture, value, _i, _len, _results;
    this.tree_canvas.append("circle").style("stroke", "gray").style("fill", "lightblue").attr("r", 5).attr("cx", x).attr("cy", y);
    _results = [];
    for (key in treeData) {
      value = treeData[key];
      if (!(key === 'name')) {
        continue;
      }
      this.tree_canvas.append("text").attr("dx", x + 20).attr("dy", y + 5).on("click", function() {
        return onNodeClick(this);
      }).text(value);
      for (key in treeData) {
        value = treeData[key];
        if (key === 'associated_pictures') {
          for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
            picture = value[i];
            console.log(picture, i);
            this.tree_canvas.append("svg:image").attr("xlink:href", picture[1]).attr("width", 45).attr("height", 45).attr("x", 150 + i * 50).attr("y", y - 20).attr("class", "flickr-thumbnail").attr("rel", "popover").on("mouseover", function() {
              return onImageMouseOver(this);
            }).on("mouseout", function() {
              return onImageMouseOut(this);
            });
          }
        }
      }
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (key in treeData) {
          hyponyms = treeData[key];
          if (key === 'hyponyms') {
            _results1.push((function() {
              var _j, _len1, _results2;
              _results2 = [];
              for (i = _j = 0, _len1 = hyponyms.length; _j < _len1; i = ++_j) {
                hyponym = hyponyms[i];
                _results2.push(this.tree_canvas.append("text").attr("dx", x + 50 + 150 * i).attr("dy", y + 30).on("click", function() {
                  return onNodeClick(this);
                }).text(hyponym['name']));
              }
              return _results2;
            }).call(this));
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  this.onNodeClick = function(nodeObject) {
    return console.log("Clicked on node: " + nodeObject.textContent);
  };

  onImageMouseOver = function(imageObject) {
    return console.log("Hover onto image: " + imageObject.href.baseVal);
  };

  onImageMouseOut = function(imageObject) {
    return console.log("Hover out of image: " + imageObject.href.baseVal);
  };

  bindFunctions = function() {
    return $('#input-searchterm').keyup(function(e) {
      if (e.keyCode === 13) {
        console.log('enter pressed');
        return getNewTree();
      }
    });
  };

  $.ready = function() {
    _this.tree_canvas = d3.select("#tree-canvas").append("svg").attr("width", $("#tree-canvas").width()).attr("height", $("#tree-canvas").height());
    bindFunctions();
    return $("#input-searchterm").focus();
  };

}).call(this);
