# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('__umfpack', [dirname(__file__)])
        except ImportError:
            import __umfpack
            return __umfpack
        if fp is not None:
            try:
                _mod = imp.load_module('__umfpack', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    __umfpack = swig_import_helper()
    del swig_import_helper
else:
    import __umfpack
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


UMFPACK_INFO = __umfpack.UMFPACK_INFO
UMFPACK_CONTROL = __umfpack.UMFPACK_CONTROL
UMFPACK_VERSION = __umfpack.UMFPACK_VERSION
UMFPACK_COPYRIGHT = __umfpack.UMFPACK_COPYRIGHT
UMFPACK_LICENSE_PART1 = __umfpack.UMFPACK_LICENSE_PART1
UMFPACK_LICENSE_PART2 = __umfpack.UMFPACK_LICENSE_PART2
UMFPACK_LICENSE_PART3 = __umfpack.UMFPACK_LICENSE_PART3
UMFPACK_DATE = __umfpack.UMFPACK_DATE
UMFPACK_MAIN_VERSION = __umfpack.UMFPACK_MAIN_VERSION
UMFPACK_SUB_VERSION = __umfpack.UMFPACK_SUB_VERSION
UMFPACK_SUBSUB_VERSION = __umfpack.UMFPACK_SUBSUB_VERSION
UMFPACK_VER = __umfpack.UMFPACK_VER
UMFPACK_STATUS = __umfpack.UMFPACK_STATUS
UMFPACK_NROW = __umfpack.UMFPACK_NROW
UMFPACK_NCOL = __umfpack.UMFPACK_NCOL
UMFPACK_NZ = __umfpack.UMFPACK_NZ
UMFPACK_SIZE_OF_UNIT = __umfpack.UMFPACK_SIZE_OF_UNIT
UMFPACK_SIZE_OF_INT = __umfpack.UMFPACK_SIZE_OF_INT
UMFPACK_SIZE_OF_LONG = __umfpack.UMFPACK_SIZE_OF_LONG
UMFPACK_SIZE_OF_POINTER = __umfpack.UMFPACK_SIZE_OF_POINTER
UMFPACK_SIZE_OF_ENTRY = __umfpack.UMFPACK_SIZE_OF_ENTRY
UMFPACK_NDENSE_ROW = __umfpack.UMFPACK_NDENSE_ROW
UMFPACK_NEMPTY_ROW = __umfpack.UMFPACK_NEMPTY_ROW
UMFPACK_NDENSE_COL = __umfpack.UMFPACK_NDENSE_COL
UMFPACK_NEMPTY_COL = __umfpack.UMFPACK_NEMPTY_COL
UMFPACK_SYMBOLIC_DEFRAG = __umfpack.UMFPACK_SYMBOLIC_DEFRAG
UMFPACK_SYMBOLIC_PEAK_MEMORY = __umfpack.UMFPACK_SYMBOLIC_PEAK_MEMORY
UMFPACK_SYMBOLIC_SIZE = __umfpack.UMFPACK_SYMBOLIC_SIZE
UMFPACK_SYMBOLIC_TIME = __umfpack.UMFPACK_SYMBOLIC_TIME
UMFPACK_SYMBOLIC_WALLTIME = __umfpack.UMFPACK_SYMBOLIC_WALLTIME
UMFPACK_STRATEGY_USED = __umfpack.UMFPACK_STRATEGY_USED
UMFPACK_ORDERING_USED = __umfpack.UMFPACK_ORDERING_USED
UMFPACK_QFIXED = __umfpack.UMFPACK_QFIXED
UMFPACK_DIAG_PREFERRED = __umfpack.UMFPACK_DIAG_PREFERRED
UMFPACK_PATTERN_SYMMETRY = __umfpack.UMFPACK_PATTERN_SYMMETRY
UMFPACK_NZ_A_PLUS_AT = __umfpack.UMFPACK_NZ_A_PLUS_AT
UMFPACK_NZDIAG = __umfpack.UMFPACK_NZDIAG
UMFPACK_SYMMETRIC_LUNZ = __umfpack.UMFPACK_SYMMETRIC_LUNZ
UMFPACK_SYMMETRIC_FLOPS = __umfpack.UMFPACK_SYMMETRIC_FLOPS
UMFPACK_SYMMETRIC_NDENSE = __umfpack.UMFPACK_SYMMETRIC_NDENSE
UMFPACK_SYMMETRIC_DMAX = __umfpack.UMFPACK_SYMMETRIC_DMAX
UMFPACK_2BY2_NWEAK = __umfpack.UMFPACK_2BY2_NWEAK
UMFPACK_2BY2_UNMATCHED = __umfpack.UMFPACK_2BY2_UNMATCHED
UMFPACK_2BY2_PATTERN_SYMMETRY = __umfpack.UMFPACK_2BY2_PATTERN_SYMMETRY
UMFPACK_2BY2_NZ_PA_PLUS_PAT = __umfpack.UMFPACK_2BY2_NZ_PA_PLUS_PAT
UMFPACK_2BY2_NZDIAG = __umfpack.UMFPACK_2BY2_NZDIAG
UMFPACK_COL_SINGLETONS = __umfpack.UMFPACK_COL_SINGLETONS
UMFPACK_ROW_SINGLETONS = __umfpack.UMFPACK_ROW_SINGLETONS
UMFPACK_N2 = __umfpack.UMFPACK_N2
UMFPACK_S_SYMMETRIC = __umfpack.UMFPACK_S_SYMMETRIC
UMFPACK_NUMERIC_SIZE_ESTIMATE = __umfpack.UMFPACK_NUMERIC_SIZE_ESTIMATE
UMFPACK_PEAK_MEMORY_ESTIMATE = __umfpack.UMFPACK_PEAK_MEMORY_ESTIMATE
UMFPACK_FLOPS_ESTIMATE = __umfpack.UMFPACK_FLOPS_ESTIMATE
UMFPACK_LNZ_ESTIMATE = __umfpack.UMFPACK_LNZ_ESTIMATE
UMFPACK_UNZ_ESTIMATE = __umfpack.UMFPACK_UNZ_ESTIMATE
UMFPACK_VARIABLE_INIT_ESTIMATE = __umfpack.UMFPACK_VARIABLE_INIT_ESTIMATE
UMFPACK_VARIABLE_PEAK_ESTIMATE = __umfpack.UMFPACK_VARIABLE_PEAK_ESTIMATE
UMFPACK_VARIABLE_FINAL_ESTIMATE = __umfpack.UMFPACK_VARIABLE_FINAL_ESTIMATE
UMFPACK_MAX_FRONT_SIZE_ESTIMATE = __umfpack.UMFPACK_MAX_FRONT_SIZE_ESTIMATE
UMFPACK_MAX_FRONT_NROWS_ESTIMATE = __umfpack.UMFPACK_MAX_FRONT_NROWS_ESTIMATE
UMFPACK_MAX_FRONT_NCOLS_ESTIMATE = __umfpack.UMFPACK_MAX_FRONT_NCOLS_ESTIMATE
UMFPACK_NUMERIC_SIZE = __umfpack.UMFPACK_NUMERIC_SIZE
UMFPACK_PEAK_MEMORY = __umfpack.UMFPACK_PEAK_MEMORY
UMFPACK_FLOPS = __umfpack.UMFPACK_FLOPS
UMFPACK_LNZ = __umfpack.UMFPACK_LNZ
UMFPACK_UNZ = __umfpack.UMFPACK_UNZ
UMFPACK_VARIABLE_INIT = __umfpack.UMFPACK_VARIABLE_INIT
UMFPACK_VARIABLE_PEAK = __umfpack.UMFPACK_VARIABLE_PEAK
UMFPACK_VARIABLE_FINAL = __umfpack.UMFPACK_VARIABLE_FINAL
UMFPACK_MAX_FRONT_SIZE = __umfpack.UMFPACK_MAX_FRONT_SIZE
UMFPACK_MAX_FRONT_NROWS = __umfpack.UMFPACK_MAX_FRONT_NROWS
UMFPACK_MAX_FRONT_NCOLS = __umfpack.UMFPACK_MAX_FRONT_NCOLS
UMFPACK_NUMERIC_DEFRAG = __umfpack.UMFPACK_NUMERIC_DEFRAG
UMFPACK_NUMERIC_REALLOC = __umfpack.UMFPACK_NUMERIC_REALLOC
UMFPACK_NUMERIC_COSTLY_REALLOC = __umfpack.UMFPACK_NUMERIC_COSTLY_REALLOC
UMFPACK_COMPRESSED_PATTERN = __umfpack.UMFPACK_COMPRESSED_PATTERN
UMFPACK_LU_ENTRIES = __umfpack.UMFPACK_LU_ENTRIES
UMFPACK_NUMERIC_TIME = __umfpack.UMFPACK_NUMERIC_TIME
UMFPACK_UDIAG_NZ = __umfpack.UMFPACK_UDIAG_NZ
UMFPACK_RCOND = __umfpack.UMFPACK_RCOND
UMFPACK_WAS_SCALED = __umfpack.UMFPACK_WAS_SCALED
UMFPACK_RSMIN = __umfpack.UMFPACK_RSMIN
UMFPACK_RSMAX = __umfpack.UMFPACK_RSMAX
UMFPACK_UMIN = __umfpack.UMFPACK_UMIN
UMFPACK_UMAX = __umfpack.UMFPACK_UMAX
UMFPACK_ALLOC_INIT_USED = __umfpack.UMFPACK_ALLOC_INIT_USED
UMFPACK_FORCED_UPDATES = __umfpack.UMFPACK_FORCED_UPDATES
UMFPACK_NUMERIC_WALLTIME = __umfpack.UMFPACK_NUMERIC_WALLTIME
UMFPACK_NOFF_DIAG = __umfpack.UMFPACK_NOFF_DIAG
UMFPACK_ALL_LNZ = __umfpack.UMFPACK_ALL_LNZ
UMFPACK_ALL_UNZ = __umfpack.UMFPACK_ALL_UNZ
UMFPACK_NZDROPPED = __umfpack.UMFPACK_NZDROPPED
UMFPACK_IR_TAKEN = __umfpack.UMFPACK_IR_TAKEN
UMFPACK_IR_ATTEMPTED = __umfpack.UMFPACK_IR_ATTEMPTED
UMFPACK_OMEGA1 = __umfpack.UMFPACK_OMEGA1
UMFPACK_OMEGA2 = __umfpack.UMFPACK_OMEGA2
UMFPACK_SOLVE_FLOPS = __umfpack.UMFPACK_SOLVE_FLOPS
UMFPACK_SOLVE_TIME = __umfpack.UMFPACK_SOLVE_TIME
UMFPACK_SOLVE_WALLTIME = __umfpack.UMFPACK_SOLVE_WALLTIME
UMFPACK_ORDERING_COLAMD = __umfpack.UMFPACK_ORDERING_COLAMD
UMFPACK_ORDERING_AMD = __umfpack.UMFPACK_ORDERING_AMD
UMFPACK_ORDERING_GIVEN = __umfpack.UMFPACK_ORDERING_GIVEN
UMFPACK_PRL = __umfpack.UMFPACK_PRL
UMFPACK_DENSE_ROW = __umfpack.UMFPACK_DENSE_ROW
UMFPACK_DENSE_COL = __umfpack.UMFPACK_DENSE_COL
UMFPACK_BLOCK_SIZE = __umfpack.UMFPACK_BLOCK_SIZE
UMFPACK_STRATEGY = __umfpack.UMFPACK_STRATEGY
UMFPACK_2BY2_TOLERANCE = __umfpack.UMFPACK_2BY2_TOLERANCE
UMFPACK_FIXQ = __umfpack.UMFPACK_FIXQ
UMFPACK_AMD_DENSE = __umfpack.UMFPACK_AMD_DENSE
UMFPACK_AGGRESSIVE = __umfpack.UMFPACK_AGGRESSIVE
UMFPACK_PIVOT_TOLERANCE = __umfpack.UMFPACK_PIVOT_TOLERANCE
UMFPACK_ALLOC_INIT = __umfpack.UMFPACK_ALLOC_INIT
UMFPACK_SYM_PIVOT_TOLERANCE = __umfpack.UMFPACK_SYM_PIVOT_TOLERANCE
UMFPACK_SCALE = __umfpack.UMFPACK_SCALE
UMFPACK_FRONT_ALLOC_INIT = __umfpack.UMFPACK_FRONT_ALLOC_INIT
UMFPACK_DROPTOL = __umfpack.UMFPACK_DROPTOL
UMFPACK_IRSTEP = __umfpack.UMFPACK_IRSTEP
UMFPACK_COMPILED_WITH_BLAS = __umfpack.UMFPACK_COMPILED_WITH_BLAS
UMFPACK_COMPILED_FOR_MATLAB = __umfpack.UMFPACK_COMPILED_FOR_MATLAB
UMFPACK_COMPILED_WITH_GETRUSAGE = __umfpack.UMFPACK_COMPILED_WITH_GETRUSAGE
UMFPACK_COMPILED_IN_DEBUG_MODE = __umfpack.UMFPACK_COMPILED_IN_DEBUG_MODE
UMFPACK_STRATEGY_AUTO = __umfpack.UMFPACK_STRATEGY_AUTO
UMFPACK_STRATEGY_UNSYMMETRIC = __umfpack.UMFPACK_STRATEGY_UNSYMMETRIC
UMFPACK_STRATEGY_2BY2 = __umfpack.UMFPACK_STRATEGY_2BY2
UMFPACK_STRATEGY_SYMMETRIC = __umfpack.UMFPACK_STRATEGY_SYMMETRIC
UMFPACK_SCALE_NONE = __umfpack.UMFPACK_SCALE_NONE
UMFPACK_SCALE_SUM = __umfpack.UMFPACK_SCALE_SUM
UMFPACK_SCALE_MAX = __umfpack.UMFPACK_SCALE_MAX
UMFPACK_DEFAULT_PRL = __umfpack.UMFPACK_DEFAULT_PRL
UMFPACK_DEFAULT_DENSE_ROW = __umfpack.UMFPACK_DEFAULT_DENSE_ROW
UMFPACK_DEFAULT_DENSE_COL = __umfpack.UMFPACK_DEFAULT_DENSE_COL
UMFPACK_DEFAULT_PIVOT_TOLERANCE = __umfpack.UMFPACK_DEFAULT_PIVOT_TOLERANCE
UMFPACK_DEFAULT_2BY2_TOLERANCE = __umfpack.UMFPACK_DEFAULT_2BY2_TOLERANCE
UMFPACK_DEFAULT_SYM_PIVOT_TOLERANCE = __umfpack.UMFPACK_DEFAULT_SYM_PIVOT_TOLERANCE
UMFPACK_DEFAULT_BLOCK_SIZE = __umfpack.UMFPACK_DEFAULT_BLOCK_SIZE
UMFPACK_DEFAULT_ALLOC_INIT = __umfpack.UMFPACK_DEFAULT_ALLOC_INIT
UMFPACK_DEFAULT_FRONT_ALLOC_INIT = __umfpack.UMFPACK_DEFAULT_FRONT_ALLOC_INIT
UMFPACK_DEFAULT_IRSTEP = __umfpack.UMFPACK_DEFAULT_IRSTEP
UMFPACK_DEFAULT_SCALE = __umfpack.UMFPACK_DEFAULT_SCALE
UMFPACK_DEFAULT_STRATEGY = __umfpack.UMFPACK_DEFAULT_STRATEGY
UMFPACK_DEFAULT_FIXQ = __umfpack.UMFPACK_DEFAULT_FIXQ
UMFPACK_DEFAULT_AGGRESSIVE = __umfpack.UMFPACK_DEFAULT_AGGRESSIVE
UMFPACK_DEFAULT_DROPTOL = __umfpack.UMFPACK_DEFAULT_DROPTOL
UMFPACK_OK = __umfpack.UMFPACK_OK
UMFPACK_WARNING_singular_matrix = __umfpack.UMFPACK_WARNING_singular_matrix
UMFPACK_WARNING_determinant_underflow = __umfpack.UMFPACK_WARNING_determinant_underflow
UMFPACK_WARNING_determinant_overflow = __umfpack.UMFPACK_WARNING_determinant_overflow
UMFPACK_ERROR_out_of_memory = __umfpack.UMFPACK_ERROR_out_of_memory
UMFPACK_ERROR_invalid_Numeric_object = __umfpack.UMFPACK_ERROR_invalid_Numeric_object
UMFPACK_ERROR_invalid_Symbolic_object = __umfpack.UMFPACK_ERROR_invalid_Symbolic_object
UMFPACK_ERROR_argument_missing = __umfpack.UMFPACK_ERROR_argument_missing
UMFPACK_ERROR_n_nonpositive = __umfpack.UMFPACK_ERROR_n_nonpositive
UMFPACK_ERROR_invalid_matrix = __umfpack.UMFPACK_ERROR_invalid_matrix
UMFPACK_ERROR_different_pattern = __umfpack.UMFPACK_ERROR_different_pattern
UMFPACK_ERROR_invalid_system = __umfpack.UMFPACK_ERROR_invalid_system
UMFPACK_ERROR_invalid_permutation = __umfpack.UMFPACK_ERROR_invalid_permutation
UMFPACK_ERROR_internal_error = __umfpack.UMFPACK_ERROR_internal_error
UMFPACK_ERROR_file_IO = __umfpack.UMFPACK_ERROR_file_IO
UMFPACK_A = __umfpack.UMFPACK_A
UMFPACK_At = __umfpack.UMFPACK_At
UMFPACK_Aat = __umfpack.UMFPACK_Aat
UMFPACK_Pt_L = __umfpack.UMFPACK_Pt_L
UMFPACK_L = __umfpack.UMFPACK_L
UMFPACK_Lt_P = __umfpack.UMFPACK_Lt_P
UMFPACK_Lat_P = __umfpack.UMFPACK_Lat_P
UMFPACK_Lt = __umfpack.UMFPACK_Lt
UMFPACK_Lat = __umfpack.UMFPACK_Lat
UMFPACK_U_Qt = __umfpack.UMFPACK_U_Qt
UMFPACK_U = __umfpack.UMFPACK_U
UMFPACK_Q_Ut = __umfpack.UMFPACK_Q_Ut
UMFPACK_Q_Uat = __umfpack.UMFPACK_Q_Uat
UMFPACK_Ut = __umfpack.UMFPACK_Ut
UMFPACK_Uat = __umfpack.UMFPACK_Uat

def umfpack_di_solve(*args):
  """
    umfpack_di_solve(int sys, int Ap, int Ai, double Ax, double X, double B, 
        void Numeric, double Control, double Info) -> int
    """
  return __umfpack.umfpack_di_solve(*args)

def umfpack_dl_solve(*args):
  """
    umfpack_dl_solve(UF_long sys, UF_long Ap, UF_long Ai, double Ax, double X, 
        double B, void Numeric, double Control, 
        double Info) -> UF_long
    """
  return __umfpack.umfpack_dl_solve(*args)

def umfpack_zi_solve(*args):
  """
    umfpack_zi_solve(int sys, int Ap, int Ai, double Ax, double Az, double Xx, 
        double Xz, double Bx, double Bz, void Numeric, 
        double Control, double Info) -> int
    """
  return __umfpack.umfpack_zi_solve(*args)

def umfpack_zl_solve(*args):
  """
    umfpack_zl_solve(UF_long sys, UF_long Ap, UF_long Ai, double Ax, double Az, 
        double Xx, double Xz, double Bx, double Bz, 
        void Numeric, double Control, double Info) -> UF_long
    """
  return __umfpack.umfpack_zl_solve(*args)

def umfpack_di_defaults(*args):
  """umfpack_di_defaults(double Control)"""
  return __umfpack.umfpack_di_defaults(*args)

def umfpack_dl_defaults(*args):
  """umfpack_dl_defaults(double Control)"""
  return __umfpack.umfpack_dl_defaults(*args)

def umfpack_zi_defaults(*args):
  """umfpack_zi_defaults(double Control)"""
  return __umfpack.umfpack_zi_defaults(*args)

def umfpack_zl_defaults(*args):
  """umfpack_zl_defaults(double Control)"""
  return __umfpack.umfpack_zl_defaults(*args)

def umfpack_di_triplet_to_col(*args):
  """
    umfpack_di_triplet_to_col(int n_row, int n_col, int nz, int Ti, int Tj, double Tx, 
        int Ap, int Ai, double Ax, int Map) -> int
    """
  return __umfpack.umfpack_di_triplet_to_col(*args)

def umfpack_dl_triplet_to_col(*args):
  """
    umfpack_dl_triplet_to_col(UF_long n_row, UF_long n_col, UF_long nz, UF_long Ti, 
        UF_long Tj, double Tx, UF_long Ap, UF_long Ai, 
        double Ax, UF_long Map) -> UF_long
    """
  return __umfpack.umfpack_dl_triplet_to_col(*args)

def umfpack_zi_triplet_to_col(*args):
  """
    umfpack_zi_triplet_to_col(int n_row, int n_col, int nz, int Ti, int Tj, double Tx, 
        double Tz, int Ap, int Ai, double Ax, double Az, 
        int Map) -> int
    """
  return __umfpack.umfpack_zi_triplet_to_col(*args)

def umfpack_zl_triplet_to_col(*args):
  """
    umfpack_zl_triplet_to_col(UF_long n_row, UF_long n_col, UF_long nz, UF_long Ti, 
        UF_long Tj, double Tx, double Tz, UF_long Ap, 
        UF_long Ai, double Ax, double Az, UF_long Map) -> UF_long
    """
  return __umfpack.umfpack_zl_triplet_to_col(*args)

def umfpack_di_col_to_triplet(*args):
  """umfpack_di_col_to_triplet(int n_col, int Ap, int Tj) -> int"""
  return __umfpack.umfpack_di_col_to_triplet(*args)

def umfpack_dl_col_to_triplet(*args):
  """umfpack_dl_col_to_triplet(UF_long n_col, UF_long Ap, UF_long Tj) -> UF_long"""
  return __umfpack.umfpack_dl_col_to_triplet(*args)

def umfpack_zi_col_to_triplet(*args):
  """umfpack_zi_col_to_triplet(int n_col, int Ap, int Tj) -> int"""
  return __umfpack.umfpack_zi_col_to_triplet(*args)

def umfpack_zl_col_to_triplet(*args):
  """umfpack_zl_col_to_triplet(UF_long n_col, UF_long Ap, UF_long Tj) -> UF_long"""
  return __umfpack.umfpack_zl_col_to_triplet(*args)

def umfpack_di_transpose(*args):
  """
    umfpack_di_transpose(int n_row, int n_col, int Ap, int Ai, double Ax, int P, 
        int Q, int Rp, int Ri, double Rx) -> int
    """
  return __umfpack.umfpack_di_transpose(*args)

def umfpack_dl_transpose(*args):
  """
    umfpack_dl_transpose(UF_long n_row, UF_long n_col, UF_long Ap, UF_long Ai, 
        double Ax, UF_long P, UF_long Q, UF_long Rp, 
        UF_long Ri, double Rx) -> UF_long
    """
  return __umfpack.umfpack_dl_transpose(*args)

def umfpack_zi_transpose(*args):
  """
    umfpack_zi_transpose(int n_row, int n_col, int Ap, int Ai, double Ax, double Az, 
        int P, int Q, int Rp, int Ri, double Rx, 
        double Rz, int do_conjugate) -> int
    """
  return __umfpack.umfpack_zi_transpose(*args)

def umfpack_zl_transpose(*args):
  """
    umfpack_zl_transpose(UF_long n_row, UF_long n_col, UF_long Ap, UF_long Ai, 
        double Ax, double Az, UF_long P, UF_long Q, 
        UF_long Rp, UF_long Ri, double Rx, double Rz, 
        UF_long do_conjugate) -> UF_long
    """
  return __umfpack.umfpack_zl_transpose(*args)

def umfpack_di_scale(*args):
  """umfpack_di_scale(double X, double B, void Numeric) -> int"""
  return __umfpack.umfpack_di_scale(*args)

def umfpack_dl_scale(*args):
  """umfpack_dl_scale(double X, double B, void Numeric) -> UF_long"""
  return __umfpack.umfpack_dl_scale(*args)

def umfpack_zi_scale(*args):
  """umfpack_zi_scale(double Xx, double Xz, double Bx, double Bz, void Numeric) -> int"""
  return __umfpack.umfpack_zi_scale(*args)

def umfpack_zl_scale(*args):
  """umfpack_zl_scale(double Xx, double Xz, double Bx, double Bz, void Numeric) -> UF_long"""
  return __umfpack.umfpack_zl_scale(*args)

def umfpack_di_report_symbolic(*args):
  """umfpack_di_report_symbolic(void Symbolic, double Control) -> int"""
  return __umfpack.umfpack_di_report_symbolic(*args)

def umfpack_dl_report_symbolic(*args):
  """umfpack_dl_report_symbolic(void Symbolic, double Control) -> UF_long"""
  return __umfpack.umfpack_dl_report_symbolic(*args)

def umfpack_zi_report_symbolic(*args):
  """umfpack_zi_report_symbolic(void Symbolic, double Control) -> int"""
  return __umfpack.umfpack_zi_report_symbolic(*args)

def umfpack_zl_report_symbolic(*args):
  """umfpack_zl_report_symbolic(void Symbolic, double Control) -> UF_long"""
  return __umfpack.umfpack_zl_report_symbolic(*args)

def umfpack_di_report_numeric(*args):
  """umfpack_di_report_numeric(void Numeric, double Control) -> int"""
  return __umfpack.umfpack_di_report_numeric(*args)

def umfpack_dl_report_numeric(*args):
  """umfpack_dl_report_numeric(void Numeric, double Control) -> UF_long"""
  return __umfpack.umfpack_dl_report_numeric(*args)

def umfpack_zi_report_numeric(*args):
  """umfpack_zi_report_numeric(void Numeric, double Control) -> int"""
  return __umfpack.umfpack_zi_report_numeric(*args)

def umfpack_zl_report_numeric(*args):
  """umfpack_zl_report_numeric(void Numeric, double Control) -> UF_long"""
  return __umfpack.umfpack_zl_report_numeric(*args)

def umfpack_di_report_info(*args):
  """umfpack_di_report_info(double Control, double Info)"""
  return __umfpack.umfpack_di_report_info(*args)

def umfpack_dl_report_info(*args):
  """umfpack_dl_report_info(double Control, double Info)"""
  return __umfpack.umfpack_dl_report_info(*args)

def umfpack_zi_report_info(*args):
  """umfpack_zi_report_info(double Control, double Info)"""
  return __umfpack.umfpack_zi_report_info(*args)

def umfpack_zl_report_info(*args):
  """umfpack_zl_report_info(double Control, double Info)"""
  return __umfpack.umfpack_zl_report_info(*args)

def umfpack_di_report_control(*args):
  """umfpack_di_report_control(double Control)"""
  return __umfpack.umfpack_di_report_control(*args)

def umfpack_dl_report_control(*args):
  """umfpack_dl_report_control(double Control)"""
  return __umfpack.umfpack_dl_report_control(*args)

def umfpack_zi_report_control(*args):
  """umfpack_zi_report_control(double Control)"""
  return __umfpack.umfpack_zi_report_control(*args)

def umfpack_zl_report_control(*args):
  """umfpack_zl_report_control(double Control)"""
  return __umfpack.umfpack_zl_report_control(*args)

def umfpack_di_symbolic(*args):
  """
    umfpack_di_symbolic(int n_row, int n_col, int Ap, int Ai, double Ax, double Control, 
        double Info) -> int
    """
  return __umfpack.umfpack_di_symbolic(*args)

def umfpack_dl_symbolic(*args):
  """
    umfpack_dl_symbolic(UF_long n_row, UF_long n_col, UF_long Ap, UF_long Ai, 
        double Ax, double Control, double Info) -> UF_long
    """
  return __umfpack.umfpack_dl_symbolic(*args)

def umfpack_zi_symbolic(*args):
  """
    umfpack_zi_symbolic(int n_row, int n_col, int Ap, int Ai, double Ax, double Az, 
        double Control, double Info) -> int
    """
  return __umfpack.umfpack_zi_symbolic(*args)

def umfpack_zl_symbolic(*args):
  """
    umfpack_zl_symbolic(UF_long n_row, UF_long n_col, UF_long Ap, UF_long Ai, 
        double Ax, double Az, double Control, double Info) -> UF_long
    """
  return __umfpack.umfpack_zl_symbolic(*args)

def umfpack_di_numeric(*args):
  """
    umfpack_di_numeric(int Ap, int Ai, double Ax, void Symbolic, double Control, 
        double Info) -> int
    """
  return __umfpack.umfpack_di_numeric(*args)

def umfpack_dl_numeric(*args):
  """
    umfpack_dl_numeric(UF_long Ap, UF_long Ai, double Ax, void Symbolic, double Control, 
        double Info) -> UF_long
    """
  return __umfpack.umfpack_dl_numeric(*args)

def umfpack_zi_numeric(*args):
  """
    umfpack_zi_numeric(int Ap, int Ai, double Ax, double Az, void Symbolic, 
        double Control, double Info) -> int
    """
  return __umfpack.umfpack_zi_numeric(*args)

def umfpack_zl_numeric(*args):
  """
    umfpack_zl_numeric(UF_long Ap, UF_long Ai, double Ax, double Az, void Symbolic, 
        double Control, double Info) -> UF_long
    """
  return __umfpack.umfpack_zl_numeric(*args)

def umfpack_di_free_symbolic(*args):
  """umfpack_di_free_symbolic(void Symbolic)"""
  return __umfpack.umfpack_di_free_symbolic(*args)

def umfpack_dl_free_symbolic(*args):
  """umfpack_dl_free_symbolic(void Symbolic)"""
  return __umfpack.umfpack_dl_free_symbolic(*args)

def umfpack_zi_free_symbolic(*args):
  """umfpack_zi_free_symbolic(void Symbolic)"""
  return __umfpack.umfpack_zi_free_symbolic(*args)

def umfpack_zl_free_symbolic(*args):
  """umfpack_zl_free_symbolic(void Symbolic)"""
  return __umfpack.umfpack_zl_free_symbolic(*args)

def umfpack_di_free_numeric(*args):
  """umfpack_di_free_numeric(void Numeric)"""
  return __umfpack.umfpack_di_free_numeric(*args)

def umfpack_dl_free_numeric(*args):
  """umfpack_dl_free_numeric(void Numeric)"""
  return __umfpack.umfpack_dl_free_numeric(*args)

def umfpack_zi_free_numeric(*args):
  """umfpack_zi_free_numeric(void Numeric)"""
  return __umfpack.umfpack_zi_free_numeric(*args)

def umfpack_zl_free_numeric(*args):
  """umfpack_zl_free_numeric(void Numeric)"""
  return __umfpack.umfpack_zl_free_numeric(*args)

def umfpack_di_get_lunz(*args):
  """umfpack_di_get_lunz(void Numeric) -> int"""
  return __umfpack.umfpack_di_get_lunz(*args)

def umfpack_dl_get_lunz(*args):
  """
    umfpack_dl_get_lunz(UF_long lnz, UF_long unz, UF_long n_row, UF_long n_col, 
        UF_long nz_udiag, void Numeric) -> UF_long
    """
  return __umfpack.umfpack_dl_get_lunz(*args)

def umfpack_zi_get_lunz(*args):
  """umfpack_zi_get_lunz(void Numeric) -> int"""
  return __umfpack.umfpack_zi_get_lunz(*args)

def umfpack_zl_get_lunz(*args):
  """
    umfpack_zl_get_lunz(UF_long lnz, UF_long unz, UF_long n_row, UF_long n_col, 
        UF_long nz_udiag, void Numeric) -> UF_long
    """
  return __umfpack.umfpack_zl_get_lunz(*args)

def umfpack_di_get_numeric(*args):
  """
    umfpack_di_get_numeric(int Lp, int Lj, double Lx, int Up, int Ui, double Ux, 
        int P, int Q, double Dx, double Rs, void Numeric) -> int
    """
  return __umfpack.umfpack_di_get_numeric(*args)

def umfpack_dl_get_numeric(*args):
  """
    umfpack_dl_get_numeric(UF_long Lp, UF_long Lj, double Lx, UF_long Up, UF_long Ui, 
        double Ux, UF_long P, UF_long Q, double Dx, 
        UF_long do_recip, double Rs, void Numeric) -> UF_long
    """
  return __umfpack.umfpack_dl_get_numeric(*args)

def umfpack_zi_get_numeric(*args):
  """
    umfpack_zi_get_numeric(int Lp, int Lj, double Lx, double Lz, int Up, int Ui, 
        double Ux, double Uz, int P, int Q, double Dx, 
        double Dz, double Rs, void Numeric) -> int
    """
  return __umfpack.umfpack_zi_get_numeric(*args)

def umfpack_zl_get_numeric(*args):
  """
    umfpack_zl_get_numeric(UF_long Lp, UF_long Lj, double Lx, double Lz, UF_long Up, 
        UF_long Ui, double Ux, double Uz, UF_long P, 
        UF_long Q, double Dx, double Dz, UF_long do_recip, 
        double Rs, void Numeric) -> UF_long
    """
  return __umfpack.umfpack_zl_get_numeric(*args)
# This file is compatible with both classic and new-style classes.


